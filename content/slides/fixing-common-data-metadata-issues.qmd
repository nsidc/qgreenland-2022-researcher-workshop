---
title: "Fixing common data/metadata issues"
subtitle: "QGreenland Researcher Workshop 2023"
background-image: "/_media/DMS_1842643_12758_20180418_18111267_clipped.jpg"
title-slide-attributes:
  data-background-image: "/_media/DMS_1842643_12758_20180418_18111267_clipped.jpg"
---

## What tool should I use?

The best one for the job.

Explore the alternatives available in the ecosystem you want to work!

::: {.notes}
You may recognize this slide from the "data inspection" deck.

Tool selection is context-dependent.

Command-line tools are especially useful for getting a quick answer.

Language-specific tools are good for automations or research code. These
examples use Python because that's what we're most familiar with, but explore
your preferred ecosystem and you'll find equivalents.
:::


## Data scenario #1: Missing metadata

[Link](/content/exercises/data-scenarios/missing-metadata)

:::: {.columns}

::: {.column}
![QGreenland screenshot of layer with missing
metadata](/_media/qgreenland_missing_metadata.png)
:::

::: {.column}
```{.text  code-line-numbers="11"}
$ gdalinfo dem_without_metadata.tif
Driver: GTiff/GeoTIFF
Files: dem_without_metadata.tif
Size is 301, 561
Metadata:
  TIFFTAG_XRESOLUTION=1
  TIFFTAG_YRESOLUTION=1
Image Structure Metadata:
  INTERLEAVE=BAND
Corner Coordinates:
Upper Left  (    0.0,    0.0)
Lower Left  (    0.0,  561.0)
Upper Right (  301.0,    0.0)
Lower Right (  301.0,  561.0)
Center      (  150.5,  280.5)
Band 1 Block=301x6 Type=Float32, ColorInterp=Gray
```
:::

::::

::: {.notes}
The included data file sample (`dem_without_metadata.tif`) is not a real example
of data from NSIDC; it's been modified from the original
([here](https://nsidc.org/data/nsidc-0092/versions/1)) to present a challenge.
:::


## Data scenario #1: Solution

First, make a copy of the data that we will apply edits to:
```{.console}
$ cp dem_without_metadata.tif dem_with_metadata.tif
```

Next, use `gdal_edit.py` to edit, in place, the metadata of
`dem_with_metadata.tif` with the information provided to us in the
dataset landing page.

```{.console}
$ gdal_edit.py \
> -a_srs "+proj=stere +lat_0=90 +lat_ts=71 +lon_0=-39 +x_0=0 +y_0=0 +a=6378137 +rf=298.257024882273 +units=m +no_defs" \
> -a_ullr -802500.000 -597500.000 702500.000 -3402500.000 \
> dem_with_metadata.tif
```

::: {.notes}
`gdal_edit.py` is well-suited for this task: the data is already a `.tif`, which
supports metadata required by tools like `qgis` to correctly locate the data in
space.
:::

## Data scenario #1: All better!

![QGreenland screenshot of layer with edited
metadata](/_media/qgreenland_edited_metadata.png)

## Data scenario #2: Vector data needs reformatting

[Link](/content/exercises/data-scenarios/vector-needs-reformatting)

:::: {.columns}

::: {.column}
![xlsx vector data](/_media/qgreenland_scenario1_table.png)
:::

::: {.column}
```{.console code-line-numbers="5|6,10-11|8-9"}
$ ogrinfo -al -so kcbcc_DS4_final_v2_final.xlsx
INFO: Open of `kcbcc_DS4_final_v2_final.xlsx'
      using driver `XLSX' successful.

Layer name: Sheet1
Geometry: None
Feature Count: 12
Layer SRS WKT:
(unknown)
x: Real (0.0)
y: Real (0.0)
cuteness_rating: Real (0.0)
blood_acetone_grams_per_ml: Real (0.0)
blood_acetylcholine_grams_per_ml: Real (0.0)
```
:::

::::

:::{.notes}
The x and y values appear to be lat and lon values. Our email from Dr. Foobarbaz
indicates the data is in a "WGS84" projection.
:::

## Data scenario #2: Solution

The `gdal` [VRT](https://gdal.org/drivers/vector/vrt.html) driver can be used.

Add a `kcbcc_DS4_final_v2_final.vrt` with the following content:

```{.text}
<OGRVRTDataSource>
    <OGRVRTLayer name="Sheet1">
        <SrcDataSource>kcbcc_DS4_final_v2_final.xlsx</SrcDataSource>
        <SrcLayer>Sheet1</SrcLayer>
        <GeometryType>wkbPoint</GeometryType>
        <LayerSRS>EPSG:4326</LayerSRS>
        <GeometryField encoding="PointFromColumns" x="x" y="y" reportSrcColumn="FALSE" />
    </OGRVRTLayer>
</OGRVRTDataSource>
```

Then, use `ogr2ogr`:

```{.console}
$ ogr2ogr \
>   -nln "kcbcc" \
>   output.geojson \
>   kcbcc_DS4_final_v2_final.vrt
```

:::{.notes}
A `.vrt` file that sits alongside the xlsx file containing the above will allow
ogr2ogr to transform the data into a GeoPackage, GeoJSON, etc.

Note that there are other approaches that use `ogr2ogr` as well. E.g., the
[`with_ogr2ogr.sh`
solution](/content/exercises/data-scenarios/vector-needs-reformatting/solution/with_ogr2ogr.sh)
uses an SQL query to generate GeoJSON with the correct metadata.
:::

## Data scenario #2: Solution

```
$ cat output.geojson | jq
{
  "type": "FeatureCollection",
  "name": "kcbcc",
  "crs": {
    "type": "name",
    "properties": {
      "name": "urn:ogc:def:crs:OGC:1.3:CRS84"
    }
  },
  "features": [
    {
      "type": "Feature",
      "properties": {
        "cuteness_rating": 9.226,
        "blood_acetone_grams_per_ml": 1.945e-05,
        "blood_acetylcholine_grams_per_ml": 7.22e-08
      },
      "geometry": {
        "type": "Point",
        "coordinates": [
          -63.3070952173288,
          76.9630048613197
        ]
      }
    },
    ...<clipped for brevity>...
  ]
}
```

## TODO: Advanced techniques

* _TODO: briefly mention techniques like georegistration, bias correction?_


## What if I can't find a way to fix my data?

Metadata may be undocumented or incorrectly documented; contact data producer!

::: {.callout-warning}
It's possible nobody living knows how to fix the problem!
:::

::: {.notes}
Worst-case scenarios:

* If the metadata is incorrectly documented, there may be no way to "guess" the correct
  configuration. Contacting the originator may be the _only_ way forward. 
* Data originator may have passed away, changed careers, stopped checking their
  email, or forgotten about the data you're working with.
:::
