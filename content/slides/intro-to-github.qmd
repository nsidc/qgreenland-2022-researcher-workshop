---
title: "Intro to GitHub"
subtitle: "QGreenland Researcher Workshop 2023"
background-image: "/_media/DMS_1842643_12758_20180418_18111267_clipped.jpg"
title-slide-attributes:
  data-background-image: "/_media/DMS_1842643_12758_20180418_18111267_clipped.jpg"
---

<!-- TODO:
* Example Open Source research repositories?
-->

# Intro to GitHub

* Provide a "taste" of the utility of Git and GitHub
* Intermediate/advanced topics out of scope
    * See [continued learning](/content/continued-learning.html#gitgithub) page
    * Attend office hours!

::: {.notes}
We love Git and are excited to teach about it, but we don't have room in this workshop
to fit that and still meet our other goals. We welcome anyone who wants to learn more to
attend office hours on day 4. We also provide resources for continued independent
learning.
:::


# Working "in the open"

![<https://allisonhorst.com>](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/e4a11b1f-f235-461f-ab73-ce6128c59e49.png?h=dc95847637c97b0d5f5c993e906f2ccd)


## Working "in the open"

* Improve reproducibility with open data and open code
    * Zenodo integrates with GitHub for auto-generating DOIs
* Increase innovation and quality through inclusivity
* Facilitate global collaboration
* Easier and more powerful if you are open from the beginning
* Git/GitHub are not just for coders!

::: {.notes}
Open Science principles can apply to all of the work that you are doing. Now that we
have some knowledge about the data that we want to keep track of and share with others,
let's utilize GitHub as the mechanism to translate that knowledge to documentation.

*Git/GitHub are not just for coders!*  You can open your manuscripts, your books, your
websites, your methodology, and your documentation using these tools.
:::


# Git vs GitHub

:::::: {.columns}
::: {.column width="50%"}
![Git logo](https://git-scm.com/images/logos/downloads/Git-Icon-1788C.svg){width=300}
:::
::: {.column width="50%"}
![GitHub logo](/_media/github-mark.svg){width=300}
:::
::::::


## ![](https://git-scm.com/images/logos/downloads/Git-Icon-1788C.svg){width=50 style="vertical-align: middle"} Git

Git is the "foundation" of GitHub; it is an information (*not* code!) management
system. Git can answer questions like:

* Who made this change?
* What did this information look like last week?
* When did this change occur?
* Why was this change made?

[Learn more about Git](https://docs.github.com/en/get-started/using-git/about-git)

::: {.notes}
Git is the underlying technology that makes GitHub work. Git manages information over
time, enabling collaboration and "time travel" through the history of your work
products.

There are alternatives to Git, like Mercurial and SVN, but Git is the most widely
adopted information management tool.

At its core, Git is a command-line interface, but there are so many interfaces built on
top of it to make it more powerful and/or user-friendly. There are editor integrations
for VIM, Emacs, Visual Studio Code; there are websites built on top of it, like GitHub,
BitBucket, GitLab. 
:::


## ![](/_media/github-mark.svg){width=50 style="vertical-align: middle"} GitHub {.smaller}

GitHub is a hosting service for Git repositories with lots of extra bells and whistles.
GitHub has competitors like GitLab and BitBucket which offer similar features, like:

* Back up your work on their servers
* Facilitating conversations and approval process for changes
* Bug tracking and associated discussion
* Documentation with Wiki-like features
* Project management tools
* Running automations in response to changes, e.g.:
    * Build a website and deploy it
    * Generate a PDF from LaTeX or Markdown
    * Check code for errors or style compliance
    * Compile code

::: {.notes}
We are focusing on GitHub instead of its competitors because it is currently the most
popular. If you're interested in an alternative which is more open, consider looking
into GitLab, which offers an open-source core called "Community Edition" and a
source-available "Enterprise Edition" which provides extra features.
:::


# Demo: Setting up a GitHub repository

## Create a GitHub repository {.smaller}

![New repository button at top-left of <https://github.com>](/_media/github_new_repo.png)

![Get the "owner" right and make it public](/_media/github_new_repo_fields.png)


## Create a README file

![Add README to an empty repository](/_media/github_empty_repo_add_readme.png)

![GitHub README editor](/_media/github_readme_editor.png)

## Create a README file

To "save" the file, we have to click "Commit new file". It's helpful to write a change
description, but here, "Create README.md" does the trick.

![Commit new file to the repository](/_media/github_commit_new_file.png)


## Edit the README file

I made a mistake: I wanted the "Authors" to be on a separate line from "Selected
dataset".

![README doesn't look quite right, let's edit it](/_media/github_readme_edit_button.png)


## Edit the README file

I need to add a blank line between paragraphs:

![README in the GitHub editor](/_media/github_readme_editor.png)


## Edit the README file

Now it's time for a descriptive "commit message"!

![Commit changes](/_media/github_commit_changes.png)


## Add a Jupyter Notebook

_TODO: This._

## Review provenance

_TODO: How to view commits._


## Enable GitHub Discussions

![GitHub repository settings](/_media/github_repo_settings.png)


## Enable GitHub Discussions

![GitHub repository settings > Features](/_media/github_repo_features.png)


## Enable GitHub Discussions

![Discussions navbar link](/_media/github_discussions_demo_repo.png)
